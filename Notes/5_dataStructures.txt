array insertion - O(n)
                - Omega(1)
search - O(1)
vector are resizable arrays

arrays cannot be resizable
you have to again copy it to a bigger array by copying elements to the new bigger array

Linkedlist: Resizable list
Insertion: O(1)
Search: O(n)

-> = *. ((*n).i = n->i)
typedef struct node
{
    int i;
    struct node *next;
}node;

node *head = NULL;

void insert(int n)
{
    node *temp = malloc(sizeof(node));
    if(head == NULL)
    {
        temp->int = n;
        temp->next = NULL;
        head = temp;
    }
    else
    {
        node *temp1 = head;
        while(temp1->next!=NULL)
        {
            temp1 = temp1->next;
        }
        temp1->next = temp;
        temp->int = n;
        temp->next = NULL;
    }

}

if suppose 
char *s = malloc(4);
char *f = malloc(4);
free(s) - it will only free the memory but the pointer is still there
we can re-use the s
s = f;
now s points to f

Binary Search tree
O(logn) - insertion time
O(logn) - search

skewed BST = linkedlist
can be mitigated by shifting root node
1->2->3 old root = 1 
1<-2->3 new root = 2

Hash Tables - O(1)
Collision = if two elements get same hash value
Chaining can be used to mitigate colission but not an ideal solution
Linear Probing can also be used to mitigate, where if current slot is occupied we place it in the next slot, but this is leads to clustering 
where it becomes an array again


Hash function: deterministic, unique value for any input
Takes i/p and outputs hash value(unique & deterministic)

Tries: array of pointers

Queue: Enqueue, Dequeue
FIFO

Stack: push, pop
LIFO

Dictionaries
Associate keys with values


<time.h>
srand(time(0)) - necessary step before num generation
rand() - generates random number 
