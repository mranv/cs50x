Running-Times 
Dividing means logarithmic
O - Big O notation
Order of (n or n-1 or logn)

Worst case(Higher Bound)
O(n^2) - selection sort, optimized bubble sort
O(nlogn) - merge sort
O(n) - linear search
O(logn) - binary search
O(1)[constant number of steps irrespective of i/p size]

Best Case(Lower Bound) 
Omega(n^2) - selection sort 
Omega(nlogn) - merge sort
Omega(n) - optimized bubble sort
Omega(logn)
Omega(1) - linear search, binary search

Avg Case(middle Bound) (if uper = lower bound)
Theta(n^2) - selection sort 
Theta(nlogn) - merge sort
Theta(n) - 
Theta(logn)
Theta(1) 

CPU - 1GHz - means 1 billion instructions per sec

Structures
typedef struct
{
    string name;
}person;
inside main we can write
person people[2];

bubble sort - bubbling of larger numbers to right
merge sort - sort left, sort right, merge
sorting: divide until we have two sub arrays of size 1, then compare them and merge
for sub arrays of size > 2, compare each element of left half of sub array and right half, then merge
