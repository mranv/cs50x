CDS

correctness - if code is working as intended
design - how well it is written(whether code is doing what is necessary and not more than asked)
style - Comments, variable names(mnemonic)

CS50 Library 
Link: ide.cs50.io

Header files 
#include <cs50.h> 
#include <stdio.h>  
Anything beginning with # is a pre-processor directive.
It's a process done before compilation. Basically preprocess the source code with modifications which are dictated by directive
Here include is the directive. It means to include source code from input provided from whom we will use some functions, variables etc
stdio.h - header files(can also be a .c file) is file name whom we will be including in the source file. <> indicate they are standard libraries.
If you want to use custom-user made files, simply put " "



string ans = get_string("What ?: "); - gets input and stores it as get_string
%s, %d - placeholders or format specifiers
%d - assumes integers
%i - identifies base of number (012 - octal, 0x12 - hexadecimal)
int main(void) - better to write void
all get_datatype fuction literally ignore any input unless we provide asked data-type
Ex: get_int only accepts integers, not empty char, strings, float, double
Note: float, duble actually have different range. We use mantissa, exponent to represent fractions here
In float (single precision) - precision upto 6 decimal values
In double(double precision) - precision upto 15 decimal values


help50 - To help understand errors/ warnings in meaningful way
Syntax: help50 make hello - Here hello is name of c program file

style50 - reminds of styling code
Syntax: style50 hello.c

// - comments in C
/* */ - multiline comments in c

check50 - Check all testcases
Syntax: check50 cs50/problems/hello - (This part will be mentioned in the question)
submit50 - Submit program
debug50 - debugging C binary
Syntax: debug50 ./hello
debug50 needs breakpoints
step over - current line in the function
step into - moves into function when we call it. Call stack has func above main 


ls - list files 

rm hello.c - remove hello.c
rmdir lecture - remove directory
rm -r directory_name - deletes entire directory

mv hello.c .. - move file(hello.c) up one level of home directory tree
mv hello.c goodbye.c - move file(hello.c) to any location or rename(instead of location we name it goodbye.c to rename it)

mkdir lecture - create folder named lecture

cd lecture/ - change directory to folder location
cd - Just entering cd takes to root directory

cp -r lecture /home/ubuntu - here -r is used to recursively copy every file/folder in the directory called lecture. without -r, it just copies a file to specified directory

~/ - home/root directory
~/lecture/ - /home/ubuntu/lecture


Datatypes:
bool(1 byte), char(1 byte), double(8 bytes), float(4 bytes), int(4 bytes), long(8 bytes) - datatypes
string, bool are data-types exclusive to cs50.h
get_char, get_double, get_float, get_long, get_string 
in cs50.h library, all libraries return values except get_string() - it returns addrss of 1st character
that's why its either
string s = get_string();
or 
char *s = get_string();



signed or default int/any data_type - -ve(-2^31) to +ve(2^31 - 1)
unsigned - only +ve(0 to 2^32 - 1) same range as signed but doubles +ve range 
char (-2^7 to 2^7 - 1)
void - is type, not data-type



Implicit Typecasting - when small datatype is used with bigger datatype it enhances the result to bigger one,but reverse is not true
int/int = int 
but int/float - float or int/double=double

Explicit Typecasting - allows both big to small typecasting & vice-versa. Careful as it truncates, which results in loss of precision
(int)float = int

Some important things:
printf("%d",double_datatype) - issues warning but compiles fine, it prints garbage - since double range > int range 
printf("%f", int_datatype) - issues warning but compiles fine and prints the correct value with decimals
Takeaway: if placeholder range > variable datatype range - prints fine, vice-versa prints garbage but in both cases it issues warnings 

single quotes for characters, double quotes for strings 

while(true) or while(1) - both booleans & numbers(0 - false,1 (any non-zero)- true) can be used
condition inside while is mandatory
booleans - true, false

+=, ++ - acceptable in C
c = 6, e = 6
d = c++ //d here will be 6 not 7, but c is 7
printf("%d",e++) - also prints 6 instead of 7
but
c=6
f = c + c++  //don't use such expressions anywhere because this is undefined behavior(there are two end-points here. c value is being referenced two times, giving rise to ambiguity)

Order of precedence
(post)++, (post)--, +, - (Unary)  post ++, -- (left-to-right)
(pre)++, --  pre ++, -- (right-to-left)
* / %
+ - (binary)
==, !=, ?:
+=, -=, %=, *=, /= 



for(int i = 0,j = 0; i < n && i < n1; i+=1 or n or i++, j++)
all 3 arguments in for is not necessary, provided we have done initialisation(multiple values can be initialised), condition(multiple conditions can be used with logical operators), increment/decrement inside /outside loop

For functions, we can declare prototype above main function, and define them later down the road
Prototypes - int func(void) or void func(int, float)
also these are accepted - int func(int a, int b[]) - naming of parameters is allowed

; - line termination

do{}while();

Floating point imprecision:
Integer Overflow:
  any_num = low limit + (current_num - (higherlimit + 1))

Ternary Operator
int x = (expr) ? value1(expr is true) : value2(expr is false)
