a.out - assembly output(default machine code file)

Not just declaring header files, but compile libraries by using linker (-l)
Ex: -lm, -lcs50

Compile process:
preprocessing - replace (#)header files with code of those libraries
compiling - convert source code to assembly code
assembling - convert assembly code to machine code(binary 0's and 1's)
linking - link/merge machine codes of all other libraries, main functions

arrays - continguous memory locations
In c11 - we can get input from user and declare array size
Ex: arr[tot], tot is taken as i/p during run-time, tot can also be const type
Assignment of empty array to another array using assignment operator is not legal C, so we copy manually using loops.(Although you can assign a new pointer to the array)
global arrays are automatically initialised with zeros
This is also true for global ints, floats(set to zeros)

const int TOTAL = 3 // Var TOTAL is of type int and constant across the program 
Convention to capitalize variable names which are constant

(int)char or printf("%i",any_char_variable) or int s[1]; s[0] = 'any_char' gives ASCII value

Strings: array of characters
ending of every string = '\0'(null-terminator:ASCII - 0(8bits of zeros))
This can be visualised by printf("%i",s[length]) gives zero 


Problem with C;
EX: char or int or any_datatype s[100]
when printing we do printf("%i",s[any_num])
but what if the any_num > array length, C will absolutely compile fine and print whatever in the memory location eventhough it's length < any_num(ASCII VALUE since it's %i). It's also true for multi dimensional arrays a[any_num][any_num] will compile fine since and run even tho any_num > array_length
This is undesired and dangerous property and can be used to find or explore values in memory using array(or pointers)
This is a perfect example of why printf or any loop(for, while) doesn't have bounds checking for arrays 
Simply put C doesn't have bounds checking for arrays

<string.h> - .h indicates header file(plain text file)
strlen(s) - string length 
strcmp(s, s1) - returns 0 if two strings equal
              - returns -ve(difference of ascii values of chars where they re different = 1st string char ascii - 2nd string char ascii) if s is lower than s1 alphabetically
              - returns +ve if s is greater than s1 alphabetically
strcpy(s, s1) - copy char from s1 to s

Array of strings 
string words[2]
words[0] = "sada"
words[1] = "Saddasd"
words[0][0] - s 
s[i] >= 'a' && s[i] <= 'z' - relational operators can be used for chars
s[i] - 32 - (upper-case to lower-case)

<ctype.h>
islower(s[i]) - returns any_num if char is lower alphabet, otherwise return zero
tolower(s[i]) - converts to lower chars
toupper, isupper

int main(int argc, string argv[]) - CLI Arguments
argc(arg count) = no of arguments in argv - calculated automatically (no of arguments + 1(./hello))
argv[0](arg vector) is ./hello - can be ignored
argv is string array

int main - int because it returns exit status
return num 
num = 
    0 - successfull
    1 - something went wrong
Only true for exit codes
return 1 can used as exit() in C

To see exit status integer - Type echo $? in terminal

Variables
Global variables outside main or any other function uptop is called global variables. Value can be manipulated and change is across the program
Const are one kind of global variables except their value cannot be changed
arguments passed to function recieve copies of variables, not the actual value
but arrays are passed by reference as copies can be memory intense

<stdlib.h>
atoi(string) - string to num
Return value
If successfully executed, the function returns the integer value.
If the string starts with an alphanumeric character or only contains alphanumeric characters, 0 is returned.
In case the string starts with a numeric character but is followed by an alpha-numeric character, the string is converted to an integer until the occurrence of the first alphanumeric character
