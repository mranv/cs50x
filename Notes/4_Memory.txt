hexa decimal (base - 16)
0-9, A-F
FF -255

           R  G  B
Hex Code:  FF FF FF

& - address
* - pointer(de-reference operator - go-to the address and see the value)
printf("%p", &n); 
printf("%i\n", *&n) is similar to printf("%i\n", n)

Memory allocated during compile-time, but if we want to instead get memory during run-time, we use malloc using pointers

Pointer is data-item
 whose value is address and type is value you will find when you de-reference that address
int *p = &n
store address of n in p 
*p - de-references value stored in p
Keep in mind address of n is stored in p which itself is stored in another address
pointer might be 32 or 64 bits(4 or 8(most likely) bytes)
printf("%i", *p);

pointer address can also be accessed
printf("%p", &p);

p holds address which is pointer
and * de-refernces that p to give value

string s = char *s 
so we can directly use printf("%p", s); we dont use &s;
because s itself holds addr of first character of string
but if we use subscript then & is necessary
printf("%p", &s[0]);

Pointer arithmetic
In-case of strings
*s = s[0]
*(s + i) = s[i]
*s + i = s[0] + i

Segmentation fault - touching segment of memory prohibited than extent of code supposed to do
strcmp(s, t) - here s,t were literally address of 1st char of s,t strings

char *s = malloc(n bytes)
when mallocing strings n = num of characters + 1(null terminator)
but when ur allocating static, just use char s[n], n = num of characters(no need null terminator) 

<stdlib.h>
s = "Aswdasd"
t = malloc(strlen(s) + 1)
for(int i =0, n = strlen(s); i<=n; i++)
t[i] = s[i]
keep in mind i<=n since we need 1 extra space for null terminator
malloc return NULL if unable to allocate mem &B return addr
always intialize pointers to NULL

remember to free malloc using free(t)

char *t = malloc(4);
if (t == NULL)
return 1;
after mallocing, good practice to check if t is NULL
When assigning
Don't do t = "hi"; //here hi is stored in a new location and its address is returned to t, therefore losing mem address t was previously pointing to
it shud be
*t ='h';
*(t + 1) = 'i';
or strcpy(t, "hi");

void *calloc(size_t nitems, size_t size)
    nitems − This is the number of elements to be allocated.
    size − This is the size of elements.

ptr = realloc(ptr, x);
    Here, ptr is reallocated with a new size x

valgrind - To detect memory leaks & mem wastage
Syntax: valgrind ./memory 
Can use help50 valgrind ./memory

Correct syntax for allocating mem and return address which is stored in y
int *y;
y = malloc(4);

sizeof(int) - function returns bytes of data_type

Before you assign any value *y, allocate mem and return its addr to store in y
once its done, assign value to *y = 56;

int *x, *y;
x = malloc(4);
*x = 45;
y = x;
x points to adress which holds 45
Even tho y doesnt have any mem allocated and address returned to it, if we use
y = x;
y just points to whatever x points to
global pointers,strings or values, arrays are generally assigned to NULL or 0

Memory management used by C
machine code
global variables
heap: malloc, global variables, dynamic mem allocation - will remain during enitire duration of program
|
|
|
stack: func calls, local variables, static mem allocation - cleared immediately after function ends
Frames are pieces of code occupying the heap or stack
On stack, top most frame is one called recently and it becomes active-frame
Once it's work is done, it pops off the stack
and next func call becomes active frame

func calls order:
|
|
swap
main - all local variables in main initialised here

swap(&a, &b)
void swap(int *a, int *b) - why here we use(*a,*b) instead of (&a, &b) remember int *a = &n. In *a a holds address and *a de-references the address to get value
Also we can't just use int &a as there is no such thing in C where int & can hold address but rather *a where a can definitely hold address. &a is right but &b = &a is definitely wrong
Ultimately we need to change values by accessing their address not copies of that address/values
{
    int tmp = *a;
    *a = *b;
    *b = tmp;
}

Stack Overflow: more memory occupied by stack. Occupies more than heap
like more func calls, too much recursion depth etc

Buffer overflow - Use more memory than allocated for variables
Ex: arrayIndexOutofBounds, value given to variable higher than it's range etc

int *a, char *b;
a = malloc(3)
b = malloc(2)
scanf("%d", a);
scanf("%s", b);
printf("%i", *a);
printf("%s", b); - because to print string we dont need first character, but the addr of first character
remember 
if int a - normal, whenever a func asks address its &a, and its value then a
if int *a - whenever a func asks address its a, and its value then *a
int a[3] - whenever a func asks address its a(first element addr as next elemnts can be printed based on 1st elemnets addr), and its value then a[i]
int *a; a = malloc(3) - whenever a func asks address its a, and its value then a[i]


File Pointers
FILE *f - file pointers
f = fopen("filename.ext", "mode") // for strings we do fscanf(character_array, "%s", fileptr) reads string line by line, returns EOF at the end(character array shud be declared before with appropriate size)
mode - r, w, a
if (file == NULL) //Important step to do after calling FILE *file
{
    printf("doesnt exist)
    return 1
}
//Write anything here
fprintf(f, "%s %s\n", var1, var2) - print to a file
fclose(f) - close at the end

typedef uint8_t BYTE - unsigned ints of size 8bits(1byte)
typedef int16_t - signed ints of size 16bits(2 Bytes)
BYTE bytes[3] - similar to int a[3]
fread(bytes, sizeof(BYTE),3,file) - read into a buffer(ready binary files)
    bytes - address of buffer
    sizeof(BYTE) -  = size of each element buffer can hold  
    3 - = size of buffer (bytes[3])
    file - filename
will read file BYTES, n(3) number of times and returns number of elements it has read, if it encounters null data or reach END_OF_FILE, returns 0


JPEG first 3 bytes(0xff, 0xd8, 0xff) - (necessary but not sufficient)
fwrite(bytes, sizeof(BYTE),3,file) - write to a file, while buffer holds a binary file

char c = fgetc(file pointer) - get character one by one when used in a loop
provided file pointer was opened in readmode
returns EOF at the end of EOF
while((ch = fgetc(f)) != EOF)
printf("%c", ch);

fputc(c, filepointer) -  write character one by one when used in a loop
file pointer must be in write/append mode

but if we have BYTES byte
then its fread(bytes, sizeof(BYTE), 3, file)

any arrays are nothing but pointers to 1st element
int i = 0;
sprintf(string variable, "%03i.jpg", i);
i++;

fseek(), feof(), ftell() - some useful func

typedef uint8_t BYTE;
typedef struct
{
    BYTE a,b,c;
}photo;

photo image[400][600]
Copying and assigning values to structure having BYTE variables is directly done by fread(image[i], nsize_t, size_t, fileptr)
no need to again define image[i][j].a, image[i][j].b, image[i][j].c = respectibe bytes etc.
